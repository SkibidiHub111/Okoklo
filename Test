local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
repeat task.wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")

local char = player.Character
local humanoid = char:WaitForChild("Humanoid")
local Cash = player:WaitForChild("leaderstats"):WaitForChild("Cash")
local PlotsFolder = workspace:FindFirstChild("Plots")

local function findNPC(name)
    for _, model in ipairs(workspace:GetDescendants()) do
        if model:IsA("Model") and model.Name == name then
            if PlotsFolder and model:IsDescendantOf(PlotsFolder) then
                continue
            end
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                return model, root
            end
        end
    end
end

local function followAndHoldE(root, model)
    local holding = true
    task.spawn(function()
        while holding and model and model.Parent do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.2)
        end
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end)

    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            holding = false
            conn:Disconnect()
            return
        end
        humanoid:MoveTo(root.Position + Vector3.new(0, 0, -2))
    end)

    task.delay(6, function()
        if conn then
            holding = false
            conn:Disconnect()
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        end
    end)
end

task.spawn(function()
    while true do
        local selectedValue = nil
        for moneyValue, data in pairs(getgenv().Config.BuyIfMoney) do
            if data.Enable and Cash.Value >= moneyValue then
                if not selectedValue or moneyValue > selectedValue then
                    selectedValue = moneyValue
                end
            end
        end

        if selectedValue then
            local data = getgenv().Config.BuyIfMoney[selectedValue]
            for _, pet in ipairs(data.Brainrots) do
                if Cash.Value >= pet.Price then
                    local model, root = findNPC(pet.Name)
                    if model and root then
                        followAndHoldE(root, model)
                        repeat task.wait() until not model or not model.Parent
                        task.wait(0.5)
                    end
                end
            end
        else
            task.wait(1)
        end
    end
end)

_G.Sell = true

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

repeat task.wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
local hrp = player.Character:WaitForChild("HumanoidRootPart")

task.spawn(function()
	while _G.Sell do
		local character = player.Character
		local hrp = character and character:FindFirstChild("HumanoidRootPart")
		if hrp then
			local base = Workspace:FindFirstChild(player.Name .. "'s Base")
			if base then
				local purchases = base:FindFirstChild("Purchases")
				local plotBlock = purchases and purchases:FindFirstChild("PlotBlock")
				local hitbox = plotBlock and plotBlock:FindFirstChild("Hitbox")

				if hitbox and hitbox:IsA("BasePart") then
					local distance = (hrp.Position - hitbox.Position).Magnitude
					if distance <= 100 then
						local tweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
						local targetCFrame = hitbox.CFrame * CFrame.new(0, 3, 0)
						local tween = TweenService:Create(hrp, tweenInfo, { CFrame = targetCFrame })
						tween:Play()
						tween.Completed:Wait()
					end
				end
			end
		end
		task.wait(60)
	end
end)

task.spawn(function()
	while _G.Sell do
		for i = 1, 10 do
			pcall(function()
				ReplicatedStorage:WaitForChild("Packages")
					:WaitForChild("Net")
					:WaitForChild("RE/PlotService/ClaimCoins")
					:FireServer(i)
			end)
			task.wait(0.1)
		end
		task.wait(5)
	end
end)

if not getgenv().Config or not getgenv().Config["Base Lock"] then return end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

local plotsFolder = workspace:FindFirstChild("Plots")
local playerPlot = nil
local lteInstances = {}
local espThread = nil
local WALK_DISTANCE = 120
local walkCooldown = {}

local function findPlayerPlot()
    if not plotsFolder then return nil end
    for _, plot in pairs(plotsFolder:GetChildren()) do
        local yourBase = plot:FindFirstChild("YourBase", true)
        if yourBase and yourBase:IsA("BoolValue") and yourBase.Value == true then
            return plot
        end
    end
    return nil
end

local function getDistance(pos)
    return (RootPart.Position - pos).Magnitude
end

local function createESP(plot, mainPart)
    if lteInstances[plot.Name] then
        lteInstances[plot.Name]:Destroy()
    end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlotESP_" .. plot.Name
    billboard.Size = UDim2.new(0, 180, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 5, 0)
    billboard.AlwaysOnTop = true
    billboard.Adornee = mainPart
    billboard.MaxDistance = 1000
    billboard.Parent = plot

    local frame = Instance.new("Frame")
    frame.Name = "Frame"
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 0.8
    frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    frame.BorderSizePixel = 0
    frame.Parent = billboard

    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, -10, 1, -10)
    label.Position = UDim2.new(0, 5, 0, 5)
    label.BackgroundTransparency = 1
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.TextStrokeTransparency = 0.5
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.Parent = frame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = frame

    lteInstances[plot.Name] = billboard
    return billboard
end

playerPlot = findPlayerPlot()

if espThread then espThread:Disconnect() end

espThread = RunService.RenderStepped:Connect(function()
    if not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") then return end

    Character = Player.Character
    RootPart = Character:FindFirstChild("HumanoidRootPart")
    Humanoid = Character:FindFirstChild("Humanoid")
    if not RootPart or not Humanoid then return end
    if not plotsFolder then return end

    if not playerPlot or not playerPlot:IsDescendantOf(plotsFolder) then
        playerPlot = findPlayerPlot()
    end

    for _, plot in pairs(plotsFolder:GetChildren()) do
        local purchases = plot:FindFirstChild("Purchases")
        local plotBlock = purchases and purchases:FindFirstChild("PlotBlock")
        local mainPart = plotBlock and plotBlock:FindFirstChild("Main")
        local billboardGui = mainPart and mainPart:FindFirstChild("BillboardGui")
        local timeLabel = billboardGui and billboardGui:FindFirstChild("RemainingTime")

        if mainPart and timeLabel then
            local billboard = lteInstances[plot.Name] or createESP(plot, mainPart)
            local frame = billboard:FindFirstChild("Frame")
            local label = frame and frame:FindFirstChild("Label")

            local isUnlocked = (timeLabel.Text == "0s")
            local dist = getDistance(mainPart.Position)

            if label then
                label.Text = isUnlocked and "Unlocked" or ("Locked: " .. timeLabel.Text)
                if playerPlot and plot == playerPlot then
                    label.TextColor3 = Color3.fromRGB(0, 255, 0)
                elseif isUnlocked then
                    label.TextColor3 = Color3.fromRGB(255, 50, 50)
                else
                    label.TextColor3 = Color3.fromRGB(255, 255, 0)
                end
            end

            if isUnlocked and dist <= WALK_DISTANCE then
                local now = tick()
                local lastWalk = walkCooldown[plot] or 0
                if now - lastWalk >= 3 then
                    walkCooldown[plot] = now
                    Humanoid:MoveTo(mainPart.Position)
                end
            end
        else
            if lteInstances[plot.Name] then
                lteInstances[plot.Name]:Destroy()
                lteInstances[plot.Name] = nil
            end
        end
    end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

repeat task.wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Cash")
local humanoid = player.Character:WaitForChild("Humanoid")
local hrp = humanoid.Parent:WaitForChild("HumanoidRootPart")
local cashValue = player.leaderstats:WaitForChild("Cash")

local screenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
screenGui.Name = "BrainrotCashUI"
local cashLabel = Instance.new("TextLabel", screenGui)
cashLabel.Size = UDim2.new(0, 220, 0, 36)
cashLabel.Position = UDim2.new(1, -230, 0, 20)
cashLabel.BackgroundTransparency = 0.3
cashLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
cashLabel.TextColor3 = Color3.fromRGB(0, 255, 127)
cashLabel.Font = Enum.Font.GothamSemibold
cashLabel.TextSize = 20
cashLabel.Text = "Cash: loading..."

task.spawn(function()
    while true do
        cashLabel.Text = "Cash: " .. tostring(cashValue.Value)
        task.wait(1)
    end
end)

local function addESP(model)
    if model:FindFirstChild("ESP") then return end
    local box = Instance.new("BoxHandleAdornment")
    box.Name = "ESP"
    box.Adornee = model
    box.AlwaysOnTop = true
    box.ZIndex = 10
    box.Size = model:GetExtentsSize()
    box.Color3 = Color3.fromRGB(255, 200, 0)
    box.Transparency = 0.35
    box.Parent = model
end

local function goToAndHoldE(model)
    local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
    if not root then return end

    local holding = true
    task.spawn(function()
        while holding and model and model.Parent do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.2)
        end
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end)

    local conn = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            holding = false
            conn:Disconnect()
            return
        end
        humanoid:MoveTo(root.Position + Vector3.new(0, 0, -2))
    end)

    task.delay(5, function()
        holding = false
        conn:Disconnect()
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end)
end

local function getSellableBrainrots()
    local cash = cashValue.Value
    local result = {}

    for threshold, data in pairs(getgenv().Config.BrainrotsToSell) do
        if cash >= threshold and data.Enable then
            for _, name in ipairs(data.Brainrots) do
                result[name] = true
            end
        end
    end

    return result
end

local function scanNearbyBrainrots()
    local brainrotsAllowed = getSellableBrainrots()

    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") and brainrotsAllowed[model.Name] then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root and (root.Position - hrp.Position).Magnitude <= 30 then
                addESP(model)
                goToAndHoldE(model)
                task.wait(5.5)
            end
        end
    end
end

while true do
    pcall(scanNearbyBrainrots)
    task.wait(10)
end

--//Webhook
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local BrainrotRarity = {
    ["Common"] = {
        "Noobini Pizzanini", "Tim Cheese", "Lirili Larila"
    },
    ["Rare"] = {
        "Fluriflura", "Svinina Bombardino", "Tung Tung Tung Sahur",
        "Gangster Footera", "Boneca Ambalabu", "Capachino Assassino",
        "Ta Ta Ta Ta Sahur", "Trulimero Trulicinea"
    },
    ["Legendary"] = {
        "Bananita Dolphinita", "Brr Brr Patapim", "Burbaloni Loliloli",
        "Chef Crabracadebra", "Frigo Camelo", "Bombardiro Crocodilo",
        "Cocofanto Elefanto"
    },
    ["Mythic"] = {
        "Tralalero Tralala", "La Grande Combinasion", "La Vacca Saturno Saturnita",
        "Graipuss Medussi", "Los Tralaleritos"
    }
}

local function getRarity(name)
    for rarity, list in pairs(BrainrotRarity) do
        if table.find(list, name) then
            return rarity
        end
    end
    return "Unknown"
end

local function getNearbyBrainrots()
    local result = {}
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return result end

    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") and model:FindFirstChildWhichIsA("BasePart") then
            local dist = (model:GetPivot().Position - hrp.Position).Magnitude
            if dist <= 30 then
                local name = model.Name
                local rarity = getRarity(name)
                table.insert(result, string.format("[%s] %s", rarity, name))
            end
        end
    end

    return result
end

local function hasRare(brainrotList)
    for _, line in ipairs(brainrotList) do
        if line:find("%[Rare%]") or line:find("%[Legendary%]") or line:find("%[Mythic%]") then
            return true
        end
    end
    return false
end

local function sendWebhook()
    if not getgenv().Config or not getgenv().Config["Webhook"] or not getgenv().Config["Webhook"]["Enable"] then return end

    local brainrotList = getNearbyBrainrots()
    if #brainrotList == 0 then return end

    local user = LocalPlayer.Name
    local display = LocalPlayer.DisplayName or "Unknown"
    local cash = LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild("Cash")
    cash = cash and cash.Value or 0

    local ping = ""
    if getgenv().Config["Webhook"]["PingEveryoneWhenRare"] and hasRare(brainrotList) then
        ping = "@everyone\n"
    end

    local content = {
        ["content"] = ping,
        ["username"] = "Strawberry Cat Hub",
        ["embeds"] = {{
            ["title"] = "All Brainrot",
            ["description"] = table.concat(brainrotList, "\n"),
            ["fields"] = {
                { ["name"] = "👤 Player", ["value"] = string.format("**%s** (%s)", display, user), ["inline"] = true },
                { ["name"] = "💰 Cash", ["value"] = tostring(cash), ["inline"] = true }
            },
            ["color"] = 65280
        }}
    }

    pcall(function()
        request({
            Url = getgenv().Config["Webhook"]["Url"],
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(content)
        })
    end)
end

while true do
    sendWebhook()
    task.wait((getgenv().Config["Webhook"]["Delay"] or 1) * 60)
end
